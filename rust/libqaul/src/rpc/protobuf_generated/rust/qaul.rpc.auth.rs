// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthRpc {
    #[prost(oneof = "auth_rpc::Message", tags = "1, 2, 3, 4")]
    pub message: ::core::option::Option<auth_rpc::Message>,
}
/// Nested message and enum types in `AuthRpc`.
pub mod auth_rpc {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "1")]
        AuthRequest(super::AuthRequest),
        #[prost(message, tag = "2")]
        AuthChallenge(super::AuthChallenge),
        #[prost(message, tag = "3")]
        AuthResponse(super::AuthResponse),
        #[prost(message, tag = "4")]
        AuthResult(super::AuthResult),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub qaul_id: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AuthChallenge {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
    #[prost(uint64, tag = "2")]
    pub expires_at: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub challenge_hash: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthResult {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
